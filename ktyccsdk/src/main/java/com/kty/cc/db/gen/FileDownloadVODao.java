package com.kty.cc.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xxxx.cc.model.FileDownloadVO;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FILE_DOWNLOAD_VO".
 */
public class FileDownloadVODao extends AbstractDao<FileDownloadVO, Long> {

    public static final String TABLENAME = "FILE_DOWNLOAD_VO";

    /**
     * Properties of entity FileDownloadVO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property AbsPath = new Property(2, String.class, "absPath", false, "ABS_PATH");
        public final static Property DownStamp = new Property(3, long.class, "downStamp", false, "DOWN_STAMP");
    }


    public FileDownloadVODao(DaoConfig config) {
        super(config);
    }

    public FileDownloadVODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_DOWNLOAD_VO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"ABS_PATH\" TEXT," + // 2: absPath
                "\"DOWN_STAMP\" INTEGER NOT NULL );"); // 3: downStamp
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_DOWNLOAD_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileDownloadVO entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }

        String absPath = entity.getAbsPath();
        if (absPath != null) {
            stmt.bindString(3, absPath);
        }
        stmt.bindLong(4, entity.getDownStamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileDownloadVO entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }

        String absPath = entity.getAbsPath();
        if (absPath != null) {
            stmt.bindString(3, absPath);
        }
        stmt.bindLong(4, entity.getDownStamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public FileDownloadVO readEntity(Cursor cursor, int offset) {
        FileDownloadVO entity = new FileDownloadVO( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // absPath
                cursor.getLong(offset + 3) // downStamp
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, FileDownloadVO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAbsPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownStamp(cursor.getLong(offset + 3));
    }

    @Override
    protected final Long updateKeyAfterInsert(FileDownloadVO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(FileDownloadVO entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileDownloadVO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
