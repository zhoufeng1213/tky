package com.kty.cc.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xxxx.cc.model.ContentBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CONTENT_BEAN".
 */
public class ContentBeanDao extends AbstractDao<ContentBean, Long> {

    public static final String TABLENAME = "CONTENT_BEAN";

    /**
     * Properties of entity ContentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ContentId = new Property(0, Long.class, "contentId", true, "_id");
        public final static Property AgentUnames = new Property(1, String.class, "agentUnames", false, "AGENT_UNAMES");
        public final static Property AgentUserName = new Property(2, String.class, "agentUserName", false, "AGENT_USER_NAME");
        public final static Property AlegQuality = new Property(3, double.class, "alegQuality", false, "ALEG_QUALITY");
        public final static Property Ani = new Property(4, String.class, "ani", false, "ANI");
        public final static Property Area = new Property(5, String.class, "area", false, "AREA");
        public final static Property BillingInSec = new Property(6, int.class, "billingInSec", false, "BILLING_IN_SEC");
        public final static Property BlegQuality = new Property(7, double.class, "blegQuality", false, "BLEG_QUALITY");
        public final static Property BlegUuid = new Property(8, String.class, "blegUuid", false, "BLEG_UUID");
        public final static Property Bridged = new Property(9, boolean.class, "bridged", false, "BRIDGED");
        public final static Property ChargeMin = new Property(10, int.class, "chargeMin", false, "CHARGE_MIN");
        public final static Property ContactName = new Property(11, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property Context = new Property(12, String.class, "context", false, "CONTEXT");
        public final static Property CreateTime = new Property(13, String.class, "createTime", false, "CREATE_TIME");
        public final static Property DaSampleCategory = new Property(14, String.class, "daSampleCategory", false, "DA_SAMPLE_CATEGORY");
        public final static Property DaSampleDetail = new Property(15, String.class, "daSampleDetail", false, "DA_SAMPLE_DETAIL");
        public final static Property DaSampleName = new Property(16, String.class, "daSampleName", false, "DA_SAMPLE_NAME");
        public final static Property DaTone = new Property(17, String.class, "daTone", false, "DA_TONE");
        public final static Property Direction = new Property(18, String.class, "direction", false, "DIRECTION");
        public final static Property Dnbr = new Property(19, String.class, "dnbr", false, "DNBR");
        public final static Property Dnis = new Property(20, String.class, "dnis", false, "DNIS");
        public final static Property DurationInSec = new Property(21, int.class, "durationInSec", false, "DURATION_IN_SEC");
        public final static Property HangupCause = new Property(22, String.class, "hangupCause", false, "HANGUP_CAUSE");
        public final static Property HangupTime = new Property(23, String.class, "hangupTime", false, "HANGUP_TIME");
        public final static Property Id = new Property(24, String.class, "id", false, "ID");
        public final static Property IvrTime = new Property(25, String.class, "ivrTime", false, "IVR_TIME");
        public final static Property Lat = new Property(26, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(27, double.class, "lng", false, "LNG");
        public final static Property OrgId = new Property(28, String.class, "orgId", false, "ORG_ID");
        public final static Property Reserved1 = new Property(29, String.class, "reserved1", false, "RESERVED1");
        public final static Property Reserved2 = new Property(30, String.class, "reserved2", false, "RESERVED2");
        public final static Property Satisfy = new Property(31, int.class, "satisfy", false, "SATISFY");
        public final static Property Transfered = new Property(32, boolean.class, "transfered", false, "TRANSFERED");
        public final static Property Transferee = new Property(33, boolean.class, "transferee", false, "TRANSFEREE");
        public final static Property UpdateTime = new Property(34, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UserId = new Property(35, String.class, "userId", false, "USER_ID");
        public final static Property Uuid = new Property(36, String.class, "uuid", false, "UUID");
        public final static Property RecordFile = new Property(37, String.class, "recordFile", false, "RECORD_FILE");
        public final static Property Reserved5 = new Property(38, String.class, "reserved5", false, "RESERVED5");
        public final static Property WaitInBillingSec = new Property(39, int.class, "waitInBillingSec", false, "WAIT_IN_BILLING_SEC");
        public final static Property WaitInIvrSec = new Property(40, int.class, "waitInIvrSec", false, "WAIT_IN_IVR_SEC");
        public final static Property WaitInQueueSec = new Property(41, int.class, "waitInQueueSec", false, "WAIT_IN_QUEUE_SEC");
        public final static Property WaitInSec = new Property(42, int.class, "waitInSec", false, "WAIT_IN_SEC");
        public final static Property IsPlay = new Property(43, boolean.class, "isPlay", false, "IS_PLAY");
    }


    public ContentBeanDao(DaoConfig config) {
        super(config);
    }

    public ContentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: contentId
                "\"AGENT_UNAMES\" TEXT," + // 1: agentUnames
                "\"AGENT_USER_NAME\" TEXT," + // 2: agentUserName
                "\"ALEG_QUALITY\" REAL NOT NULL ," + // 3: alegQuality
                "\"ANI\" TEXT," + // 4: ani
                "\"AREA\" TEXT," + // 5: area
                "\"BILLING_IN_SEC\" INTEGER NOT NULL ," + // 6: billingInSec
                "\"BLEG_QUALITY\" REAL NOT NULL ," + // 7: blegQuality
                "\"BLEG_UUID\" TEXT," + // 8: blegUuid
                "\"BRIDGED\" INTEGER NOT NULL ," + // 9: bridged
                "\"CHARGE_MIN\" INTEGER NOT NULL ," + // 10: chargeMin
                "\"CONTACT_NAME\" TEXT," + // 11: contactName
                "\"CONTEXT\" TEXT," + // 12: context
                "\"CREATE_TIME\" TEXT," + // 13: createTime
                "\"DA_SAMPLE_CATEGORY\" TEXT," + // 14: daSampleCategory
                "\"DA_SAMPLE_DETAIL\" TEXT," + // 15: daSampleDetail
                "\"DA_SAMPLE_NAME\" TEXT," + // 16: daSampleName
                "\"DA_TONE\" TEXT," + // 17: daTone
                "\"DIRECTION\" TEXT," + // 18: direction
                "\"DNBR\" TEXT," + // 19: dnbr
                "\"DNIS\" TEXT," + // 20: dnis
                "\"DURATION_IN_SEC\" INTEGER NOT NULL ," + // 21: durationInSec
                "\"HANGUP_CAUSE\" TEXT," + // 22: hangupCause
                "\"HANGUP_TIME\" TEXT," + // 23: hangupTime
                "\"ID\" TEXT," + // 24: id
                "\"IVR_TIME\" TEXT," + // 25: ivrTime
                "\"LAT\" REAL NOT NULL ," + // 26: lat
                "\"LNG\" REAL NOT NULL ," + // 27: lng
                "\"ORG_ID\" TEXT," + // 28: orgId
                "\"RESERVED1\" TEXT," + // 29: reserved1
                "\"RESERVED2\" TEXT," + // 30: reserved2
                "\"SATISFY\" INTEGER NOT NULL ," + // 31: satisfy
                "\"TRANSFERED\" INTEGER NOT NULL ," + // 32: transfered
                "\"TRANSFEREE\" INTEGER NOT NULL ," + // 33: transferee
                "\"UPDATE_TIME\" TEXT," + // 34: updateTime
                "\"USER_ID\" TEXT," + // 35: userId
                "\"UUID\" TEXT," + // 36: uuid
                "\"RECORD_FILE\" TEXT," + // 37: recordFile
                "\"RESERVED5\" TEXT," + // 38: reserved5
                "\"WAIT_IN_BILLING_SEC\" INTEGER NOT NULL ," + // 39: waitInBillingSec
                "\"WAIT_IN_IVR_SEC\" INTEGER NOT NULL ," + // 40: waitInIvrSec
                "\"WAIT_IN_QUEUE_SEC\" INTEGER NOT NULL ," + // 41: waitInQueueSec
                "\"WAIT_IN_SEC\" INTEGER NOT NULL ," + // 42: waitInSec
                "\"IS_PLAY\" INTEGER NOT NULL );"); // 43: isPlay
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONTENT_BEAN_ID ON CONTENT_BEAN" +
                " (\"ID\" ASC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContentBean entity) {
        stmt.clearBindings();

        Long contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindLong(1, contentId);
        }

        String agentUnames = entity.getAgentUnames();
        if (agentUnames != null) {
            stmt.bindString(2, agentUnames);
        }

        String agentUserName = entity.getAgentUserName();
        if (agentUserName != null) {
            stmt.bindString(3, agentUserName);
        }
        stmt.bindDouble(4, entity.getAlegQuality());

        String ani = entity.getAni();
        if (ani != null) {
            stmt.bindString(5, ani);
        }

        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(6, area);
        }
        stmt.bindLong(7, entity.getBillingInSec());
        stmt.bindDouble(8, entity.getBlegQuality());

        String blegUuid = entity.getBlegUuid();
        if (blegUuid != null) {
            stmt.bindString(9, blegUuid);
        }
        stmt.bindLong(10, entity.getBridged() ? 1L : 0L);
        stmt.bindLong(11, entity.getChargeMin());

        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(12, contactName);
        }

        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(13, context);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }

        String daSampleCategory = entity.getDaSampleCategory();
        if (daSampleCategory != null) {
            stmt.bindString(15, daSampleCategory);
        }

        String daSampleDetail = entity.getDaSampleDetail();
        if (daSampleDetail != null) {
            stmt.bindString(16, daSampleDetail);
        }

        String daSampleName = entity.getDaSampleName();
        if (daSampleName != null) {
            stmt.bindString(17, daSampleName);
        }

        String daTone = entity.getDaTone();
        if (daTone != null) {
            stmt.bindString(18, daTone);
        }

        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(19, direction);
        }

        String dnbr = entity.getDnbr();
        if (dnbr != null) {
            stmt.bindString(20, dnbr);
        }

        String dnis = entity.getDnis();
        if (dnis != null) {
            stmt.bindString(21, dnis);
        }
        stmt.bindLong(22, entity.getDurationInSec());

        String hangupCause = entity.getHangupCause();
        if (hangupCause != null) {
            stmt.bindString(23, hangupCause);
        }

        String hangupTime = entity.getHangupTime();
        if (hangupTime != null) {
            stmt.bindString(24, hangupTime);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(25, id);
        }

        String ivrTime = entity.getIvrTime();
        if (ivrTime != null) {
            stmt.bindString(26, ivrTime);
        }
        stmt.bindDouble(27, entity.getLat());
        stmt.bindDouble(28, entity.getLng());

        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(29, orgId);
        }

        String reserved1 = entity.getReserved1();
        if (reserved1 != null) {
            stmt.bindString(30, reserved1);
        }

        String reserved2 = entity.getReserved2();
        if (reserved2 != null) {
            stmt.bindString(31, reserved2);
        }
        stmt.bindLong(32, entity.getSatisfy());
        stmt.bindLong(33, entity.getTransfered() ? 1L : 0L);
        stmt.bindLong(34, entity.getTransferee() ? 1L : 0L);

        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(35, updateTime);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(36, userId);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(37, uuid);
        }

        String recordFile = entity.getRecordFile();
        if (recordFile != null) {
            stmt.bindString(38, recordFile);
        }

        String reserved5 = entity.getReserved5();
        if (reserved5 != null) {
            stmt.bindString(39, reserved5);
        }
        stmt.bindLong(40, entity.getWaitInBillingSec());
        stmt.bindLong(41, entity.getWaitInIvrSec());
        stmt.bindLong(42, entity.getWaitInQueueSec());
        stmt.bindLong(43, entity.getWaitInSec());
        stmt.bindLong(44, entity.getIsPlay() ? 1L : 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContentBean entity) {
        stmt.clearBindings();

        Long contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindLong(1, contentId);
        }

        String agentUnames = entity.getAgentUnames();
        if (agentUnames != null) {
            stmt.bindString(2, agentUnames);
        }

        String agentUserName = entity.getAgentUserName();
        if (agentUserName != null) {
            stmt.bindString(3, agentUserName);
        }
        stmt.bindDouble(4, entity.getAlegQuality());

        String ani = entity.getAni();
        if (ani != null) {
            stmt.bindString(5, ani);
        }

        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(6, area);
        }
        stmt.bindLong(7, entity.getBillingInSec());
        stmt.bindDouble(8, entity.getBlegQuality());

        String blegUuid = entity.getBlegUuid();
        if (blegUuid != null) {
            stmt.bindString(9, blegUuid);
        }
        stmt.bindLong(10, entity.getBridged() ? 1L : 0L);
        stmt.bindLong(11, entity.getChargeMin());

        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(12, contactName);
        }

        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(13, context);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }

        String daSampleCategory = entity.getDaSampleCategory();
        if (daSampleCategory != null) {
            stmt.bindString(15, daSampleCategory);
        }

        String daSampleDetail = entity.getDaSampleDetail();
        if (daSampleDetail != null) {
            stmt.bindString(16, daSampleDetail);
        }

        String daSampleName = entity.getDaSampleName();
        if (daSampleName != null) {
            stmt.bindString(17, daSampleName);
        }

        String daTone = entity.getDaTone();
        if (daTone != null) {
            stmt.bindString(18, daTone);
        }

        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(19, direction);
        }

        String dnbr = entity.getDnbr();
        if (dnbr != null) {
            stmt.bindString(20, dnbr);
        }

        String dnis = entity.getDnis();
        if (dnis != null) {
            stmt.bindString(21, dnis);
        }
        stmt.bindLong(22, entity.getDurationInSec());

        String hangupCause = entity.getHangupCause();
        if (hangupCause != null) {
            stmt.bindString(23, hangupCause);
        }

        String hangupTime = entity.getHangupTime();
        if (hangupTime != null) {
            stmt.bindString(24, hangupTime);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(25, id);
        }

        String ivrTime = entity.getIvrTime();
        if (ivrTime != null) {
            stmt.bindString(26, ivrTime);
        }
        stmt.bindDouble(27, entity.getLat());
        stmt.bindDouble(28, entity.getLng());

        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(29, orgId);
        }

        String reserved1 = entity.getReserved1();
        if (reserved1 != null) {
            stmt.bindString(30, reserved1);
        }

        String reserved2 = entity.getReserved2();
        if (reserved2 != null) {
            stmt.bindString(31, reserved2);
        }
        stmt.bindLong(32, entity.getSatisfy());
        stmt.bindLong(33, entity.getTransfered() ? 1L : 0L);
        stmt.bindLong(34, entity.getTransferee() ? 1L : 0L);

        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(35, updateTime);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(36, userId);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(37, uuid);
        }

        String recordFile = entity.getRecordFile();
        if (recordFile != null) {
            stmt.bindString(38, recordFile);
        }

        String reserved5 = entity.getReserved5();
        if (reserved5 != null) {
            stmt.bindString(39, reserved5);
        }
        stmt.bindLong(40, entity.getWaitInBillingSec());
        stmt.bindLong(41, entity.getWaitInIvrSec());
        stmt.bindLong(42, entity.getWaitInQueueSec());
        stmt.bindLong(43, entity.getWaitInSec());
        stmt.bindLong(44, entity.getIsPlay() ? 1L : 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ContentBean readEntity(Cursor cursor, int offset) {
        ContentBean entity = new ContentBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // contentId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agentUnames
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // agentUserName
                cursor.getDouble(offset + 3), // alegQuality
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ani
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // area
                cursor.getInt(offset + 6), // billingInSec
                cursor.getDouble(offset + 7), // blegQuality
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // blegUuid
                cursor.getShort(offset + 9) != 0, // bridged
                cursor.getInt(offset + 10), // chargeMin
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // contactName
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // context
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createTime
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // daSampleCategory
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // daSampleDetail
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // daSampleName
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // daTone
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // direction
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dnbr
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dnis
                cursor.getInt(offset + 21), // durationInSec
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // hangupCause
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // hangupTime
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // id
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ivrTime
                cursor.getDouble(offset + 26), // lat
                cursor.getDouble(offset + 27), // lng
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // orgId
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // reserved1
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // reserved2
                cursor.getInt(offset + 31), // satisfy
                cursor.getShort(offset + 32) != 0, // transfered
                cursor.getShort(offset + 33) != 0, // transferee
                cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // updateTime
                cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // userId
                cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // uuid
                cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // recordFile
                cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // reserved5
                cursor.getInt(offset + 39), // waitInBillingSec
                cursor.getInt(offset + 40), // waitInIvrSec
                cursor.getInt(offset + 41), // waitInQueueSec
                cursor.getInt(offset + 42), // waitInSec
                cursor.getShort(offset + 43) != 0 // isPlay
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ContentBean entity, int offset) {
        entity.setContentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAgentUnames(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgentUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlegQuality(cursor.getDouble(offset + 3));
        entity.setAni(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBillingInSec(cursor.getInt(offset + 6));
        entity.setBlegQuality(cursor.getDouble(offset + 7));
        entity.setBlegUuid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBridged(cursor.getShort(offset + 9) != 0);
        entity.setChargeMin(cursor.getInt(offset + 10));
        entity.setContactName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContext(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDaSampleCategory(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDaSampleDetail(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDaSampleName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDaTone(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDirection(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDnbr(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDnis(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDurationInSec(cursor.getInt(offset + 21));
        entity.setHangupCause(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHangupTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIvrTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLat(cursor.getDouble(offset + 26));
        entity.setLng(cursor.getDouble(offset + 27));
        entity.setOrgId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setReserved1(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setReserved2(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSatisfy(cursor.getInt(offset + 31));
        entity.setTransfered(cursor.getShort(offset + 32) != 0);
        entity.setTransferee(cursor.getShort(offset + 33) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setUserId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setUuid(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setRecordFile(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setReserved5(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setWaitInBillingSec(cursor.getInt(offset + 39));
        entity.setWaitInIvrSec(cursor.getInt(offset + 40));
        entity.setWaitInQueueSec(cursor.getInt(offset + 41));
        entity.setWaitInSec(cursor.getInt(offset + 42));
        entity.setIsPlay(cursor.getShort(offset + 43) != 0);
    }

    @Override
    protected final Long updateKeyAfterInsert(ContentBean entity, long rowId) {
        entity.setContentId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(ContentBean entity) {
        if (entity != null) {
            return entity.getContentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContentBean entity) {
        return entity.getContentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
