package com.kty.cc.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxxx.cc.model.QueryCustomPersonBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUERY_CUSTOM_PERSON_BEAN".
*/
public class QueryCustomPersonBeanDao extends AbstractDao<QueryCustomPersonBean, Long> {

    public static final String TABLENAME = "QUERY_CUSTOM_PERSON_BEAN";

    /**
     * Properties of entity QueryCustomPersonBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QueryCustomId = new Property(0, Long.class, "queryCustomId", true, "_id");
        public final static Property Ckind = new Property(1, String.class, "ckind", false, "CKIND");
        public final static Property Creater = new Property(2, String.class, "creater", false, "CREATER");
        public final static Property CreaterName = new Property(3, String.class, "createrName", false, "CREATER_NAME");
        public final static Property Createtime = new Property(4, String.class, "createtime", false, "CREATETIME");
        public final static Property Datastatus = new Property(5, boolean.class, "datastatus", false, "DATASTATUS");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Id = new Property(7, String.class, "id", false, "ID");
        public final static Property Mobile = new Property(8, String.class, "mobile", false, "MOBILE");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Organ = new Property(10, String.class, "organ", false, "ORGAN");
        public final static Property Orgi = new Property(11, String.class, "orgi", false, "ORGI");
        public final static Property Owner = new Property(12, String.class, "owner", false, "OWNER");
        public final static Property OwnerName = new Property(13, String.class, "ownerName", false, "OWNER_NAME");
        public final static Property Phone = new Property(14, String.class, "phone", false, "PHONE");
        public final static Property Pinyin = new Property(15, String.class, "pinyin", false, "PINYIN");
        public final static Property RealMobileNumber = new Property(16, String.class, "realMobileNumber", false, "REAL_MOBILE_NUMBER");
        public final static Property StatusInSeas = new Property(17, int.class, "statusInSeas", false, "STATUS_IN_SEAS");
        public final static Property Updatetime = new Property(18, String.class, "updatetime", false, "UPDATETIME");
        public final static Property Updateusername = new Property(19, String.class, "updateusername", false, "UPDATEUSERNAME");
        public final static Property Username = new Property(20, String.class, "username", false, "USERNAME");
        public final static Property Address = new Property(21, String.class, "address", false, "ADDRESS");
        public final static Property Company = new Property(22, String.class, "company", false, "COMPANY");
        public final static Property Department = new Property(23, String.class, "department", false, "DEPARTMENT");
        public final static Property Duty = new Property(24, String.class, "duty", false, "DUTY");
        public final static Property Gender = new Property(25, String.class, "gender", false, "GENDER");
        public final static Property Memo = new Property(26, String.class, "memo", false, "MEMO");
        public final static Property Shares = new Property(27, String.class, "shares", false, "SHARES");
        public final static Property Letters = new Property(28, String.class, "letters", false, "LETTERS");
        public final static Property DisplayNameSpelling = new Property(29, String.class, "displayNameSpelling", false, "DISPLAY_NAME_SPELLING");
        public final static Property Number_1 = new Property(30, String.class, "number_1", false, "NUMBER_1");
        public final static Property Number_2 = new Property(31, String.class, "number_2", false, "NUMBER_2");
        public final static Property Number_3 = new Property(32, String.class, "number_3", false, "NUMBER_3");
        public final static Property Number_4 = new Property(33, String.class, "number_4", false, "NUMBER_4");
        public final static Property Number_5 = new Property(34, String.class, "number_5", false, "NUMBER_5");
        public final static Property Time_1 = new Property(35, String.class, "time_1", false, "TIME_1");
        public final static Property Time_2 = new Property(36, String.class, "time_2", false, "TIME_2");
        public final static Property Time_3 = new Property(37, String.class, "time_3", false, "TIME_3");
        public final static Property Time_4 = new Property(38, String.class, "time_4", false, "TIME_4");
        public final static Property Time_5 = new Property(39, String.class, "time_5", false, "TIME_5");
        public final static Property Custom_1 = new Property(40, String.class, "custom_1", false, "CUSTOM_1");
        public final static Property Custom_2 = new Property(41, String.class, "custom_2", false, "CUSTOM_2");
        public final static Property Custom_3 = new Property(42, String.class, "custom_3", false, "CUSTOM_3");
        public final static Property Custom_4 = new Property(43, String.class, "custom_4", false, "CUSTOM_4");
        public final static Property Custom_5 = new Property(44, String.class, "custom_5", false, "CUSTOM_5");
        public final static Property Custom_6 = new Property(45, String.class, "custom_6", false, "CUSTOM_6");
        public final static Property Custom_7 = new Property(46, String.class, "custom_7", false, "CUSTOM_7");
        public final static Property Custom_8 = new Property(47, String.class, "custom_8", false, "CUSTOM_8");
        public final static Property Custom_9 = new Property(48, String.class, "custom_9", false, "CUSTOM_9");
        public final static Property Datetime_1 = new Property(49, String.class, "datetime_1", false, "DATETIME_1");
    }


    public QueryCustomPersonBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QueryCustomPersonBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_CUSTOM_PERSON_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: queryCustomId
                "\"CKIND\" TEXT," + // 1: ckind
                "\"CREATER\" TEXT," + // 2: creater
                "\"CREATER_NAME\" TEXT," + // 3: createrName
                "\"CREATETIME\" TEXT," + // 4: createtime
                "\"DATASTATUS\" INTEGER NOT NULL ," + // 5: datastatus
                "\"EMAIL\" TEXT," + // 6: email
                "\"ID\" TEXT," + // 7: id
                "\"MOBILE\" TEXT," + // 8: mobile
                "\"NAME\" TEXT," + // 9: name
                "\"ORGAN\" TEXT," + // 10: organ
                "\"ORGI\" TEXT," + // 11: orgi
                "\"OWNER\" TEXT," + // 12: owner
                "\"OWNER_NAME\" TEXT," + // 13: ownerName
                "\"PHONE\" TEXT," + // 14: phone
                "\"PINYIN\" TEXT," + // 15: pinyin
                "\"REAL_MOBILE_NUMBER\" TEXT," + // 16: realMobileNumber
                "\"STATUS_IN_SEAS\" INTEGER NOT NULL ," + // 17: statusInSeas
                "\"UPDATETIME\" TEXT," + // 18: updatetime
                "\"UPDATEUSERNAME\" TEXT," + // 19: updateusername
                "\"USERNAME\" TEXT," + // 20: username
                "\"ADDRESS\" TEXT," + // 21: address
                "\"COMPANY\" TEXT," + // 22: company
                "\"DEPARTMENT\" TEXT," + // 23: department
                "\"DUTY\" TEXT," + // 24: duty
                "\"GENDER\" TEXT," + // 25: gender
                "\"MEMO\" TEXT," + // 26: memo
                "\"SHARES\" TEXT," + // 27: shares
                "\"LETTERS\" TEXT," + // 28: letters
                "\"DISPLAY_NAME_SPELLING\" TEXT," + // 29: displayNameSpelling
                "\"NUMBER_1\" TEXT," + // 30: number_1
                "\"NUMBER_2\" TEXT," + // 31: number_2
                "\"NUMBER_3\" TEXT," + // 32: number_3
                "\"NUMBER_4\" TEXT," + // 33: number_4
                "\"NUMBER_5\" TEXT," + // 34: number_5
                "\"TIME_1\" TEXT," + // 35: time_1
                "\"TIME_2\" TEXT," + // 36: time_2
                "\"TIME_3\" TEXT," + // 37: time_3
                "\"TIME_4\" TEXT," + // 38: time_4
                "\"TIME_5\" TEXT," + // 39: time_5
                "\"CUSTOM_1\" TEXT," + // 40: custom_1
                "\"CUSTOM_2\" TEXT," + // 41: custom_2
                "\"CUSTOM_3\" TEXT," + // 42: custom_3
                "\"CUSTOM_4\" TEXT," + // 43: custom_4
                "\"CUSTOM_5\" TEXT," + // 44: custom_5
                "\"CUSTOM_6\" TEXT," + // 45: custom_6
                "\"CUSTOM_7\" TEXT," + // 46: custom_7
                "\"CUSTOM_8\" TEXT," + // 47: custom_8
                "\"CUSTOM_9\" TEXT," + // 48: custom_9
                "\"DATETIME_1\" TEXT);"); // 49: datetime_1
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_QUERY_CUSTOM_PERSON_BEAN_ID ON QUERY_CUSTOM_PERSON_BEAN" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_CUSTOM_PERSON_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueryCustomPersonBean entity) {
        stmt.clearBindings();
 
        Long queryCustomId = entity.getQueryCustomId();
        if (queryCustomId != null) {
            stmt.bindLong(1, queryCustomId);
        }
 
        String ckind = entity.getCkind();
        if (ckind != null) {
            stmt.bindString(2, ckind);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(3, creater);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(4, createrName);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(5, createtime);
        }
        stmt.bindLong(6, entity.getDatastatus() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(11, organ);
        }
 
        String orgi = entity.getOrgi();
        if (orgi != null) {
            stmt.bindString(12, orgi);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(13, owner);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(14, ownerName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(16, pinyin);
        }
 
        String realMobileNumber = entity.getRealMobileNumber();
        if (realMobileNumber != null) {
            stmt.bindString(17, realMobileNumber);
        }
        stmt.bindLong(18, entity.getStatusInSeas());
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(19, updatetime);
        }
 
        String updateusername = entity.getUpdateusername();
        if (updateusername != null) {
            stmt.bindString(20, updateusername);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(21, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(22, address);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(23, company);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(24, department);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(25, duty);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(26, gender);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(27, memo);
        }
 
        String shares = entity.getShares();
        if (shares != null) {
            stmt.bindString(28, shares);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(29, letters);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(30, displayNameSpelling);
        }
 
        String number_1 = entity.getNumber_1();
        if (number_1 != null) {
            stmt.bindString(31, number_1);
        }
 
        String number_2 = entity.getNumber_2();
        if (number_2 != null) {
            stmt.bindString(32, number_2);
        }
 
        String number_3 = entity.getNumber_3();
        if (number_3 != null) {
            stmt.bindString(33, number_3);
        }
 
        String number_4 = entity.getNumber_4();
        if (number_4 != null) {
            stmt.bindString(34, number_4);
        }
 
        String number_5 = entity.getNumber_5();
        if (number_5 != null) {
            stmt.bindString(35, number_5);
        }
 
        String time_1 = entity.getTime_1();
        if (time_1 != null) {
            stmt.bindString(36, time_1);
        }
 
        String time_2 = entity.getTime_2();
        if (time_2 != null) {
            stmt.bindString(37, time_2);
        }
 
        String time_3 = entity.getTime_3();
        if (time_3 != null) {
            stmt.bindString(38, time_3);
        }
 
        String time_4 = entity.getTime_4();
        if (time_4 != null) {
            stmt.bindString(39, time_4);
        }
 
        String time_5 = entity.getTime_5();
        if (time_5 != null) {
            stmt.bindString(40, time_5);
        }
 
        String custom_1 = entity.getCustom_1();
        if (custom_1 != null) {
            stmt.bindString(41, custom_1);
        }
 
        String custom_2 = entity.getCustom_2();
        if (custom_2 != null) {
            stmt.bindString(42, custom_2);
        }
 
        String custom_3 = entity.getCustom_3();
        if (custom_3 != null) {
            stmt.bindString(43, custom_3);
        }
 
        String custom_4 = entity.getCustom_4();
        if (custom_4 != null) {
            stmt.bindString(44, custom_4);
        }
 
        String custom_5 = entity.getCustom_5();
        if (custom_5 != null) {
            stmt.bindString(45, custom_5);
        }
 
        String custom_6 = entity.getCustom_6();
        if (custom_6 != null) {
            stmt.bindString(46, custom_6);
        }
 
        String custom_7 = entity.getCustom_7();
        if (custom_7 != null) {
            stmt.bindString(47, custom_7);
        }
 
        String custom_8 = entity.getCustom_8();
        if (custom_8 != null) {
            stmt.bindString(48, custom_8);
        }
 
        String custom_9 = entity.getCustom_9();
        if (custom_9 != null) {
            stmt.bindString(49, custom_9);
        }
 
        String datetime_1 = entity.getDatetime_1();
        if (datetime_1 != null) {
            stmt.bindString(50, datetime_1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueryCustomPersonBean entity) {
        stmt.clearBindings();
 
        Long queryCustomId = entity.getQueryCustomId();
        if (queryCustomId != null) {
            stmt.bindLong(1, queryCustomId);
        }
 
        String ckind = entity.getCkind();
        if (ckind != null) {
            stmt.bindString(2, ckind);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(3, creater);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(4, createrName);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(5, createtime);
        }
        stmt.bindLong(6, entity.getDatastatus() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(11, organ);
        }
 
        String orgi = entity.getOrgi();
        if (orgi != null) {
            stmt.bindString(12, orgi);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(13, owner);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(14, ownerName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(16, pinyin);
        }
 
        String realMobileNumber = entity.getRealMobileNumber();
        if (realMobileNumber != null) {
            stmt.bindString(17, realMobileNumber);
        }
        stmt.bindLong(18, entity.getStatusInSeas());
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(19, updatetime);
        }
 
        String updateusername = entity.getUpdateusername();
        if (updateusername != null) {
            stmt.bindString(20, updateusername);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(21, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(22, address);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(23, company);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(24, department);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(25, duty);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(26, gender);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(27, memo);
        }
 
        String shares = entity.getShares();
        if (shares != null) {
            stmt.bindString(28, shares);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(29, letters);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(30, displayNameSpelling);
        }
 
        String number_1 = entity.getNumber_1();
        if (number_1 != null) {
            stmt.bindString(31, number_1);
        }
 
        String number_2 = entity.getNumber_2();
        if (number_2 != null) {
            stmt.bindString(32, number_2);
        }
 
        String number_3 = entity.getNumber_3();
        if (number_3 != null) {
            stmt.bindString(33, number_3);
        }
 
        String number_4 = entity.getNumber_4();
        if (number_4 != null) {
            stmt.bindString(34, number_4);
        }
 
        String number_5 = entity.getNumber_5();
        if (number_5 != null) {
            stmt.bindString(35, number_5);
        }
 
        String time_1 = entity.getTime_1();
        if (time_1 != null) {
            stmt.bindString(36, time_1);
        }
 
        String time_2 = entity.getTime_2();
        if (time_2 != null) {
            stmt.bindString(37, time_2);
        }
 
        String time_3 = entity.getTime_3();
        if (time_3 != null) {
            stmt.bindString(38, time_3);
        }
 
        String time_4 = entity.getTime_4();
        if (time_4 != null) {
            stmt.bindString(39, time_4);
        }
 
        String time_5 = entity.getTime_5();
        if (time_5 != null) {
            stmt.bindString(40, time_5);
        }
 
        String custom_1 = entity.getCustom_1();
        if (custom_1 != null) {
            stmt.bindString(41, custom_1);
        }
 
        String custom_2 = entity.getCustom_2();
        if (custom_2 != null) {
            stmt.bindString(42, custom_2);
        }
 
        String custom_3 = entity.getCustom_3();
        if (custom_3 != null) {
            stmt.bindString(43, custom_3);
        }
 
        String custom_4 = entity.getCustom_4();
        if (custom_4 != null) {
            stmt.bindString(44, custom_4);
        }
 
        String custom_5 = entity.getCustom_5();
        if (custom_5 != null) {
            stmt.bindString(45, custom_5);
        }
 
        String custom_6 = entity.getCustom_6();
        if (custom_6 != null) {
            stmt.bindString(46, custom_6);
        }
 
        String custom_7 = entity.getCustom_7();
        if (custom_7 != null) {
            stmt.bindString(47, custom_7);
        }
 
        String custom_8 = entity.getCustom_8();
        if (custom_8 != null) {
            stmt.bindString(48, custom_8);
        }
 
        String custom_9 = entity.getCustom_9();
        if (custom_9 != null) {
            stmt.bindString(49, custom_9);
        }
 
        String datetime_1 = entity.getDatetime_1();
        if (datetime_1 != null) {
            stmt.bindString(50, datetime_1);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QueryCustomPersonBean readEntity(Cursor cursor, int offset) {
        QueryCustomPersonBean entity = new QueryCustomPersonBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // queryCustomId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ckind
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creater
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createrName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createtime
            cursor.getShort(offset + 5) != 0, // datastatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // organ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orgi
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // owner
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ownerName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pinyin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // realMobileNumber
            cursor.getInt(offset + 17), // statusInSeas
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // updatetime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // updateusername
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // username
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // address
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // company
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // department
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // duty
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // gender
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // memo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // shares
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // letters
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // displayNameSpelling
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // number_1
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // number_2
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // number_3
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // number_4
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // number_5
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // time_1
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // time_2
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // time_3
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // time_4
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // time_5
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // custom_1
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // custom_2
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // custom_3
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // custom_4
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // custom_5
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // custom_6
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // custom_7
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // custom_8
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // custom_9
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49) // datetime_1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueryCustomPersonBean entity, int offset) {
        entity.setQueryCustomId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCkind(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreater(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreaterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatetime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDatastatus(cursor.getShort(offset + 5) != 0);
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrgan(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrgi(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOwner(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOwnerName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPinyin(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRealMobileNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStatusInSeas(cursor.getInt(offset + 17));
        entity.setUpdatetime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateusername(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUsername(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAddress(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompany(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDepartment(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDuty(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGender(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMemo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setShares(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLetters(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDisplayNameSpelling(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setNumber_1(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setNumber_2(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setNumber_3(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setNumber_4(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setNumber_5(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTime_1(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTime_2(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTime_3(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTime_4(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setTime_5(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setCustom_1(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCustom_2(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCustom_3(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCustom_4(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setCustom_5(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCustom_6(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setCustom_7(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCustom_8(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setCustom_9(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setDatetime_1(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueryCustomPersonBean entity, long rowId) {
        entity.setQueryCustomId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueryCustomPersonBean entity) {
        if(entity != null) {
            return entity.getQueryCustomId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueryCustomPersonBean entity) {
        return entity.getQueryCustomId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
