package com.kty.cc.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxxx.cc.model.QueryCustomPersonBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUERY_CUSTOM_PERSON_BEAN".
*/
public class QueryCustomPersonBeanDao extends AbstractDao<QueryCustomPersonBean, Long> {

    public static final String TABLENAME = "QUERY_CUSTOM_PERSON_BEAN";

    /**
     * Properties of entity QueryCustomPersonBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QueryCustomId = new Property(0, Long.class, "queryCustomId", true, "_id");
        public final static Property Ckind = new Property(1, String.class, "ckind", false, "CKIND");
        public final static Property Creater = new Property(2, String.class, "creater", false, "CREATER");
        public final static Property CreaterName = new Property(3, String.class, "createrName", false, "CREATER_NAME");
        public final static Property Createtime = new Property(4, String.class, "createtime", false, "CREATETIME");
        public final static Property Datastatus = new Property(5, boolean.class, "datastatus", false, "DATASTATUS");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Id = new Property(7, String.class, "id", false, "ID");
        public final static Property Mobile = new Property(8, String.class, "mobile", false, "MOBILE");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Organ = new Property(10, String.class, "organ", false, "ORGAN");
        public final static Property Orgi = new Property(11, String.class, "orgi", false, "ORGI");
        public final static Property Owner = new Property(12, String.class, "owner", false, "OWNER");
        public final static Property OwnerName = new Property(13, String.class, "ownerName", false, "OWNER_NAME");
        public final static Property Phone = new Property(14, String.class, "phone", false, "PHONE");
        public final static Property Pinyin = new Property(15, String.class, "pinyin", false, "PINYIN");
        public final static Property RealMobileNumber = new Property(16, String.class, "realMobileNumber", false, "REAL_MOBILE_NUMBER");
        public final static Property StatusInSeas = new Property(17, int.class, "statusInSeas", false, "STATUS_IN_SEAS");
        public final static Property Updatetime = new Property(18, String.class, "updatetime", false, "UPDATETIME");
        public final static Property Updateusername = new Property(19, String.class, "updateusername", false, "UPDATEUSERNAME");
        public final static Property Username = new Property(20, String.class, "username", false, "USERNAME");
        public final static Property Address = new Property(21, String.class, "address", false, "ADDRESS");
        public final static Property Company = new Property(22, String.class, "company", false, "COMPANY");
        public final static Property Department = new Property(23, String.class, "department", false, "DEPARTMENT");
        public final static Property Duty = new Property(24, String.class, "duty", false, "DUTY");
        public final static Property Gender = new Property(25, String.class, "gender", false, "GENDER");
        public final static Property Memo = new Property(26, String.class, "memo", false, "MEMO");
        public final static Property Shares = new Property(27, String.class, "shares", false, "SHARES");
        public final static Property Letters = new Property(28, String.class, "letters", false, "LETTERS");
        public final static Property DisplayNameSpelling = new Property(29, String.class, "displayNameSpelling", false, "DISPLAY_NAME_SPELLING");
    }


    public QueryCustomPersonBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QueryCustomPersonBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_CUSTOM_PERSON_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: queryCustomId
                "\"CKIND\" TEXT," + // 1: ckind
                "\"CREATER\" TEXT," + // 2: creater
                "\"CREATER_NAME\" TEXT," + // 3: createrName
                "\"CREATETIME\" TEXT," + // 4: createtime
                "\"DATASTATUS\" INTEGER NOT NULL ," + // 5: datastatus
                "\"EMAIL\" TEXT," + // 6: email
                "\"ID\" TEXT," + // 7: id
                "\"MOBILE\" TEXT," + // 8: mobile
                "\"NAME\" TEXT," + // 9: name
                "\"ORGAN\" TEXT," + // 10: organ
                "\"ORGI\" TEXT," + // 11: orgi
                "\"OWNER\" TEXT," + // 12: owner
                "\"OWNER_NAME\" TEXT," + // 13: ownerName
                "\"PHONE\" TEXT," + // 14: phone
                "\"PINYIN\" TEXT," + // 15: pinyin
                "\"REAL_MOBILE_NUMBER\" TEXT," + // 16: realMobileNumber
                "\"STATUS_IN_SEAS\" INTEGER NOT NULL ," + // 17: statusInSeas
                "\"UPDATETIME\" TEXT," + // 18: updatetime
                "\"UPDATEUSERNAME\" TEXT," + // 19: updateusername
                "\"USERNAME\" TEXT," + // 20: username
                "\"ADDRESS\" TEXT," + // 21: address
                "\"COMPANY\" TEXT," + // 22: company
                "\"DEPARTMENT\" TEXT," + // 23: department
                "\"DUTY\" TEXT," + // 24: duty
                "\"GENDER\" TEXT," + // 25: gender
                "\"MEMO\" TEXT," + // 26: memo
                "\"SHARES\" TEXT," + // 27: shares
                "\"LETTERS\" TEXT," + // 28: letters
                "\"DISPLAY_NAME_SPELLING\" TEXT);"); // 29: displayNameSpelling
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_QUERY_CUSTOM_PERSON_BEAN_ID ON QUERY_CUSTOM_PERSON_BEAN" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_CUSTOM_PERSON_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueryCustomPersonBean entity) {
        stmt.clearBindings();
 
        Long queryCustomId = entity.getQueryCustomId();
        if (queryCustomId != null) {
            stmt.bindLong(1, queryCustomId);
        }
 
        String ckind = entity.getCkind();
        if (ckind != null) {
            stmt.bindString(2, ckind);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(3, creater);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(4, createrName);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(5, createtime);
        }
        stmt.bindLong(6, entity.getDatastatus() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(11, organ);
        }
 
        String orgi = entity.getOrgi();
        if (orgi != null) {
            stmt.bindString(12, orgi);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(13, owner);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(14, ownerName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(16, pinyin);
        }
 
        String realMobileNumber = entity.getRealMobileNumber();
        if (realMobileNumber != null) {
            stmt.bindString(17, realMobileNumber);
        }
        stmt.bindLong(18, entity.getStatusInSeas());
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(19, updatetime);
        }
 
        String updateusername = entity.getUpdateusername();
        if (updateusername != null) {
            stmt.bindString(20, updateusername);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(21, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(22, address);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(23, company);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(24, department);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(25, duty);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(26, gender);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(27, memo);
        }
 
        String shares = entity.getShares();
        if (shares != null) {
            stmt.bindString(28, shares);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(29, letters);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(30, displayNameSpelling);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueryCustomPersonBean entity) {
        stmt.clearBindings();
 
        Long queryCustomId = entity.getQueryCustomId();
        if (queryCustomId != null) {
            stmt.bindLong(1, queryCustomId);
        }
 
        String ckind = entity.getCkind();
        if (ckind != null) {
            stmt.bindString(2, ckind);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(3, creater);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(4, createrName);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(5, createtime);
        }
        stmt.bindLong(6, entity.getDatastatus() ? 1L: 0L);
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(11, organ);
        }
 
        String orgi = entity.getOrgi();
        if (orgi != null) {
            stmt.bindString(12, orgi);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(13, owner);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(14, ownerName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(16, pinyin);
        }
 
        String realMobileNumber = entity.getRealMobileNumber();
        if (realMobileNumber != null) {
            stmt.bindString(17, realMobileNumber);
        }
        stmt.bindLong(18, entity.getStatusInSeas());
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(19, updatetime);
        }
 
        String updateusername = entity.getUpdateusername();
        if (updateusername != null) {
            stmt.bindString(20, updateusername);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(21, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(22, address);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(23, company);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(24, department);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(25, duty);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(26, gender);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(27, memo);
        }
 
        String shares = entity.getShares();
        if (shares != null) {
            stmt.bindString(28, shares);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(29, letters);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(30, displayNameSpelling);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QueryCustomPersonBean readEntity(Cursor cursor, int offset) {
        QueryCustomPersonBean entity = new QueryCustomPersonBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // queryCustomId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ckind
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creater
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createrName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createtime
            cursor.getShort(offset + 5) != 0, // datastatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // organ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orgi
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // owner
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ownerName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pinyin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // realMobileNumber
            cursor.getInt(offset + 17), // statusInSeas
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // updatetime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // updateusername
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // username
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // address
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // company
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // department
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // duty
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // gender
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // memo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // shares
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // letters
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // displayNameSpelling
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueryCustomPersonBean entity, int offset) {
        entity.setQueryCustomId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCkind(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreater(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreaterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatetime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDatastatus(cursor.getShort(offset + 5) != 0);
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrgan(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrgi(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOwner(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOwnerName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPinyin(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRealMobileNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStatusInSeas(cursor.getInt(offset + 17));
        entity.setUpdatetime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateusername(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUsername(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAddress(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompany(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDepartment(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDuty(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGender(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMemo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setShares(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLetters(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDisplayNameSpelling(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueryCustomPersonBean entity, long rowId) {
        entity.setQueryCustomId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueryCustomPersonBean entity) {
        if(entity != null) {
            return entity.getQueryCustomId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueryCustomPersonBean entity) {
        return entity.getQueryCustomId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
